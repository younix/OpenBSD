From d0c540e26a23290d7cacb685d5d814723b6c97c1 Mon Sep 17 00:00:00 2001
From: Jan Klemkow <j.klemkow@wemelug.de>
Date: Tue, 2 May 2023 21:14:28 +0200
Subject: [PATCH] vio(4): enable TCP/UDP receive csum offloading

---
 sys/dev/pv/if_vio.c | 27 ++++++++++++++++++++++++++-
 1 file changed, 26 insertions(+), 1 deletion(-)

diff --git a/sys/dev/pv/if_vio.c b/sys/dev/pv/if_vio.c
index be53ccaf7c3..391dd62f08f 100644
--- a/sys/dev/pv/if_vio.c
+++ b/sys/dev/pv/if_vio.c
@@ -47,6 +47,7 @@
 #include <netinet/in.h>
 #include <netinet/if_ether.h>
 #include <netinet/ip.h>
+#include <netinet/ip6.h>
 #include <netinet/tcp.h>
 #include <netinet/udp.h>
 
@@ -145,6 +146,7 @@ struct virtio_net_hdr {
 } __packed;
 
 #define VIRTIO_NET_HDR_F_NEEDS_CSUM	1 /* flags */
+#define VIRTIO_NET_HDR_F_DATA_VALID	2 /* csum is valid */
 #define VIRTIO_NET_HDR_GSO_NONE		0 /* gso_type */
 #define VIRTIO_NET_HDR_GSO_TCPV4	1 /* gso_type */
 #define VIRTIO_NET_HDR_GSO_UDP		3 /* gso_type */
@@ -533,7 +535,7 @@ vio_attach(struct device *parent, struct device *self, void *aux)
 	vsc->sc_driver_features = VIRTIO_NET_F_MAC | VIRTIO_NET_F_STATUS |
 	    VIRTIO_NET_F_CTRL_VQ | VIRTIO_NET_F_CTRL_RX |
 	    VIRTIO_NET_F_MRG_RXBUF | VIRTIO_NET_F_CSUM |
-	    VIRTIO_F_RING_EVENT_IDX;
+	    VIRTIO_F_RING_EVENT_IDX | VIRTIO_NET_F_GUEST_CSUM;
 
 	virtio_negotiate_features(vsc, virtio_net_feature_names);
 	if (virtio_has_feature(vsc, VIRTIO_NET_F_MAC)) {
@@ -985,6 +987,28 @@ vio_populate_rx_mbufs(struct vio_softc *sc)
 	timeout_add_sec(&sc->sc_rxtick, 1);
 }
 
+void
+vio_rx_offload(struct mbuf *m, struct virtio_net_hdr *hdr)
+{
+	struct ether_extracted ext;
+
+	if (!ISSET(hdr->flags, VIRTIO_NET_HDR_F_DATA_VALID) &&
+	    !ISSET(hdr->flags, VIRTIO_NET_HDR_F_NEEDS_CSUM))
+		return;
+
+	ether_extract_headers(m, &ext);
+
+	if (ext.tcp) {
+		m->m_pkthdr.csum_flags = M_TCP_CSUM_IN_OK;
+		if (ISSET(hdr->flags, VIRTIO_NET_HDR_F_NEEDS_CSUM))
+			SET(m->m_pkthdr.csum_flags, M_TCP_CSUM_OUT);
+	} else if (ext.udp) {
+		m->m_pkthdr.csum_flags = M_UDP_CSUM_IN_OK;
+		if (ISSET(hdr->flags, VIRTIO_NET_HDR_F_NEEDS_CSUM))
+			SET(m->m_pkthdr.csum_flags, M_UDP_CSUM_OUT);
+	}
+}
+
 /* dequeue received packets */
 int
 vio_rxeof(struct vio_softc *sc)
@@ -1018,6 +1042,7 @@ vio_rxeof(struct vio_softc *sc)
 				bufs_left = hdr->num_buffers - 1;
 			else
 				bufs_left = 0;
+			vio_rx_offload(m, hdr);
 		} else {
 			m->m_flags &= ~M_PKTHDR;
 			m0->m_pkthdr.len += m->m_len;
-- 
2.40.1

